// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings to `clib.h`.
class CLib {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  CLib(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  CLib.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<ffi.Char> greet(
    ffi.Pointer<ffi.Char> who,
  ) {
    return _greet(
      who,
    );
  }

  late final _greetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('greet');
  late final _greet = _greetPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void free_string(
    ffi.Pointer<ffi.Char> str,
  ) {
    return _free_string(
      str,
    );
  }

  late final _free_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'free_string');
  late final _free_string =
      _free_stringPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  Coordinate create_coordinate(
    double latitude,
    double longitude,
  ) {
    return _create_coordinate(
      latitude,
      longitude,
    );
  }

  late final _create_coordinatePtr =
      _lookup<ffi.NativeFunction<Coordinate Function(ffi.Double, ffi.Double)>>(
          'create_coordinate');
  late final _create_coordinate =
      _create_coordinatePtr.asFunction<Coordinate Function(double, double)>();

  Place create_place(
    ffi.Pointer<ffi.Char> name,
    double latitude,
    double longitude,
  ) {
    return _create_place(
      name,
      latitude,
      longitude,
    );
  }

  late final _create_placePtr = _lookup<
      ffi.NativeFunction<
          Place Function(
              ffi.Pointer<ffi.Char>, ffi.Double, ffi.Double)>>('create_place');
  late final _create_place = _create_placePtr
      .asFunction<Place Function(ffi.Pointer<ffi.Char>, double, double)>();

  double distance(
    Coordinate arg0,
    Coordinate arg1,
  ) {
    return _distance(
      arg0,
      arg1,
    );
  }

  late final _distancePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(Coordinate, Coordinate)>>(
          'distance');
  late final _distance =
      _distancePtr.asFunction<double Function(Coordinate, Coordinate)>();
}

final class Coordinate extends ffi.Struct {
  @ffi.Double()
  external double latitude;

  @ffi.Double()
  external double longitude;
}

final class Place extends ffi.Struct {
  external ffi.Pointer<ffi.Char> name;

  external Coordinate coordinate;
}
